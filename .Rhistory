library(GloveR)
setwd('/home/lampros/Desktop/kaggle_gpu/add_GITHUB/GloveR/tests/testthat/')
path_in = paste0(getwd(), path.expand("/test_data/doc.txt"))
path_out = paste0(getwd(), path.expand("/test_data/glove_out.txt"))
res = vocabulary_counts(train_data = path_in, MAX_vocab = 0, MIN_count = 1, output_vocabulary = path_out, trace = FALSE)
remove.packages("GloveR", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
library(GloveR)
setwd('/home/lampros/Desktop/kaggle_gpu/add_GITHUB/GloveR/tests/testthat/')
path_in = paste0(getwd(), path.expand("/test_data/doc.txt"))
path_out = paste0(getwd(), path.expand("/test_data/glove_out.txt"))
res = vocabulary_counts(train_data = path_in, MAX_vocab = 0, MIN_count = 1, output_vocabulary = path_out, trace = FALSE)
library(fastTextR)
setwd('/home/lampros/Desktop/kaggle_gpu/add_GITHUB/fastTextR/tests/testthat/')
testthat::test_that("it returns an error if the input_path parameter is invalid", {
path_in = paste0(getwd(), path.expand("/test_data1/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)  )
})
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data1/model"))
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)
testthat::test_that("it returns an error if the output_path parameter is invalid", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data1/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)  )
})
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
skipgram_cbow(input_path = path_in, output_path = path_out, method = "unknown", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)
testthat::test_that("it returns an error if the method parameter is not one of c('skipgram', 'cbow')", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "unknown", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)  )
})
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.0, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)
testthat::test_that("it returns an error if the learning rate parameter is less than or equal to 0.0", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.0, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)  )
})
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 0, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)
testthat::test_that("it returns an error if the lrUpdateRate parameter is less than or equal to 0.0", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 0, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)  )
})
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 0,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)
testthat::test_that("it returns an error if the dim parameter is less than or equal to 0.0", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 0,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)  )
})
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 0, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)
testthat::test_that("it returns an error if the ws parameter is less than or equal to 0.0", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 0, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)  )
})
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 0, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)
testthat::test_that("it returns an error if the epoch parameter is less than or equal to 0.0", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 0, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)  )
})
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 0, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)
testthat::test_that("it returns an error if the epoch parameter is less than or equal to 0.0", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 0, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)  )
})
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 0, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 0, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)
testthat::test_that("it returns an error if the wordNgrams parameter is less than or equal to 0.0", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 0, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)  )
})
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "unknown", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)
testthat::test_that("it returns an error if the loss parameter is not one of c('ns', 'hs', 'softmax')", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "unknown", bucket = 2000000, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)  )
})
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 0, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)
testthat::test_that("it returns an error if the bucket parameter is less than or equal to 0.0", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 0, minn = 0,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)  )
})
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = -1,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)
testthat::test_that("it returns an error if the minn parameter is less than 0", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = -1,
maxn = 0, thread = 6, t = 0.0001, verbose = 2)  )
})
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = -1, thread = 6, t = 0.0001, verbose = 2)
testthat::test_that("it returns an error if the maxn parameter is less than 0", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = -1, thread = 6, t = 0.0001, verbose = 2)  )
})
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 0, t = 0.0001, verbose = 2)
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 1, t = 0.0, verbose = 2)
testthat::test_that("it returns an error if the t parameter is less than or equal to 0.0", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 1, t = 0.0, verbose = 2)  )
})
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 1, t = 0.0001, verbose = -1)
testthat::test_that("it returns an error if the verbose parameter is less 0", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
testthat::expect_error( skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 1, t = 0.0001, verbose = -1)  )
})
skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 1, t = 0.0001, verbose = 3)
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
res =  skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 1, t = 0.0001, verbose = 0)
testthat::test_that("it saves the output to a file if all parameters are valid", {
path_in = paste0(getwd(), path.expand("/test_data/text8_second"))
path_out = paste0(getwd(), path.expand("/test_data/model"))
res =  skipgram_cbow(input_path = path_in, output_path = path_out, method = "skipgram", lr = 0.1, lrUpdateRate = 100, dim = 10,
ws = 5, epoch = 5, minCount = 1, neg = 5, wordNgrams = 1, loss = "ns", bucket = 2000000, minn = 0,
maxn = 0, thread = 1, t = 0.0001, verbose = 0)
testthat::expect_silent(res)
})
library(GloveR)
library(testthat)
est_check("GloveR")
test_check("GloveR")
test_dir(path = '/home/lampros/Desktop/kaggle_gpu/add_GITHUB/GloveR/tests')
library(testthat)
library(GloveR)
test_dir(path = '/home/lampros/Desktop/kaggle_gpu/add_GITHUB/GloveR/tests')
